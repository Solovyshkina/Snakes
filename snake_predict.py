# -*- coding: utf-8 -*-
"""Snake_predict.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tviLjQ7BEZB2cR9ceVd_v56pgm64imit
"""

import pandas as pd, numpy as np
import os, urllib, itertools, shutil, random
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.models import Model
from sklearn.metrics import confusion_matrix
import PIL
from tensorflow.keras.preprocessing import image
from PIL import Image
import io


classes = ['natrix', 'viper', 'smooth', 'random'] # список сущ классов
classes_rus = ['Уж', 'Гадюка', 'Медянка', 'На изображении нет змей']
test_for_class = 38

# Функция для получения списка изображений из тестовой выборки
def get_random_test_imgs(columns = 3):
    random_test_imgs = []
    for idx, _ in enumerate(classes):
        if idx == 0:
            row = random.sample(range(0, test_for_class - 1), columns)
        else:
            row = random.sample(range(test_for_class * idx, test_for_class * (idx + 1) - 1), columns)

        random_test_imgs.extend(row)

    return random_test_imgs


def predict_snake(img):
    # Prepare an image
    #img = Image.open(io.BytesIO(img))
    img = img.convert('RGB')
    img = img.resize((224, 224), Image.NEAREST)
    img_array = np.array(img)
    img_array_expanded_dims = np.expand_dims(img_array, axis=0)
    final_image = keras.applications.densenet.preprocess_input(img_array_expanded_dims)

    # Make a prediction
    pred = np.argmax(model.predict(final_image))

    # Map number to text with shakes breed
    predicted_snake = classes[pred]
    #predicted_snake = classes_rus[pred]
    return predicted_snake


def predict_probabilities(img):
    # Prepare an image
    #img = Image.open(io.BytesIO(img))
    img = img.convert('RGB')
    img = img.resize((224, 224), Image.NEAREST)
    img_array = np.array(img)
    img_array_expanded_dims = np.expand_dims(img_array, axis=0)
    final_image = keras.applications.densenet.preprocess_input(img_array_expanded_dims)

    # Make a prediction
    predict_array = model.predict(final_image).ravel() * 100
    predict_array = np.round(predict_array)
    result = f'Сlass probabilities: Уж - {predict_array[0]}%, Гадюка - {predict_array[1]}%, Медянка - {predict_array[2]}%, Змей нет - {predict_array[3]}%'
    # Map number to text with shakes breed

    return result

model = tf.keras.models.load_model('2_model.h5')

#path_to_folder = 'snake_data' # Указать свой путь к папке с csv файлами
#os.chdir(path_to_folder)
image = Image.open("snake_data/медянка.jpg")
#predict_snake(image)
predict_probabilities(image)